{"version":3,"sources":["components/PersonDetail.js","components/SearchBar.js","components/PersonList.js","App.js","serviceWorker.js","index.js"],"names":["PersonDetail","person","this","props","colorCircle","backgroundColor","Math","floor","random","toString","substr","react_default","a","createElement","className","style","name","count_pub","pageviews","Component","SearchBar","type","src","value","placeholder","PersonList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","list","PersonData","currentPage","listPerPage","handleClick","bind","assertThisInitialized","event","setState","Number","target","id","_this2","i","sort","obj1","obj2","length","_this$state","indexOfLastTodo","indexOfFirstTodo","renderList","slice","map","item","index","components_PersonDetail","key","concat","pageNumbers","ceil","push","renderPageNumbers","number","onClick","components_SearchBar","App","components_PersonList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAsCeA,mLAnCF,IACEC,EAAUC,KAAKC,MAAfF,OAOP,IAAIG,EAAc,CACdC,gBAJO,KAAO,SADJC,KAAKC,MAAsB,SAAhBD,KAAKE,UACGC,SAAS,KAAKC,QAAQ,IAOvD,OACYC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,MAAOX,GAC3BO,EAAAC,EAAAC,cAAA,YAAOZ,EAAOe,KAAK,KAGvBL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKZ,EAAOe,MACRL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBb,EAAOgB,UAApC,gCAIZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEfH,EAAAC,EAAAC,cAAA,YAAOZ,EAAOiB,oBA7BfC,aCeZC,mLAZP,OACQT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,SAASC,IAAI,uBAAuBC,MAAM,KACtDZ,EAAAC,EAAAC,cAAA,SACIQ,KAAK,SACLG,YAAY,4HAPZL,aC4GTM,oBAvGX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,QACK8B,MAAQ,CACTC,KAAMC,EACNC,YAAa,EACbC,YAAa,IAEjBV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPTA,2EAUFc,GACRtC,KAAKuC,SAAS,CACVN,YAAaO,OAAOF,EAAMG,OAAOC,uCAIhC,IAAAC,EAAA3C,MAIJ,WACG,IAAK,IAAI4C,EAAE,EACNA,EAAIZ,EAAWa,KAAK,SAASC,EAAMC,GAC/B,OAAID,EAAKhC,KAAOiC,EAAKjC,KACV,EAEPgC,EAAKhC,KAAOiC,EAAKjC,MACT,OADZ,IAGDkC,OACHJ,KAIL,IAAK,IAAIA,EAAE,EACNA,EAAIZ,EAAWa,KAAK,SAASC,EAAMC,GAC/B,OAAOA,EAAK/B,UAAU8B,EAAK9B,YAC5BgC,OACHJ,MAlBR,GAoCD,IAxCK,IAAAK,EA2BsCjD,KAAK8B,MAAxCC,EA3BHkB,EA2BGlB,KAAME,EA3BTgB,EA2BShB,YAAaC,EA3BtBe,EA2BsBf,YAGrBgB,EAAkBjB,EAAcC,EAChCiB,EAAmBD,EAAkBhB,EAGrCkB,EAFcrB,EAAKsB,MAAMF,EAAkBD,GAElBI,IAAI,SAACC,EAAMC,GACtC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAc1D,OAAQwD,EAAMG,IAAG,mBAAAC,OAAqBH,OAIzDI,EAAc,GACXhB,EAAI,EAAGA,GAAKxC,KAAKyD,KAAK9B,EAAKiB,OAASd,GAAcU,IACvDgB,EAAYE,KAAKlB,GAIrB,IAAMmB,EAAoBH,EAAYN,IAAI,SAAAU,GACtC,OACIvD,EAAAC,EAAAC,cAAA,MACI+C,IAAKM,EACLtB,GAAIsB,EACJC,QAAStB,EAAKR,aAEb6B,KAKb,OACIvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACuD,EAAD,OAGJzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAIKyC,KAMb3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAI+B,GAAG,gBACFqB,YA/FA9C,cCQVkD,mLARX,OACE1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyD,EAAD,cAJUnD,aCOEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.673eca37.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass PersonDetail extends Component {\r\n    render() {\r\n        const {person} = this.props;\r\n\r\n        function getRandomColor () {\r\n            let hex = Math.floor(Math.random() * 0xFFFFFF);\r\n            return \"#\" + (\"000000\" + hex.toString(16)).substr(-6);\r\n        }\r\n\r\n        let colorCircle = {\r\n            backgroundColor: getRandomColor()\r\n        };\r\n\r\n        return (\r\n                    <li>\r\n                        <div className='liWrapper'>\r\n                            <div className='leftInfo'>\r\n                                <div className='circle' style={colorCircle}>\r\n                                    <span>{person.name[0]}</span>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <h1>{person.name}</h1>\r\n                                        <p className='propertyForP'>{person.count_pub} публ.</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className='medal'></div>\r\n\r\n                            <span>{person.pageviews}</span>\r\n                        </div>\r\n                    </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonDetail;\r\n","import React, { Component } from 'react';\r\n// import PersonData from '../data/data';\r\n\r\nclass SearchBar extends Component {\r\n    render() {\r\n        return (\r\n                <div className='search'>\r\n                    <input type='submit' src='../images/search.png' value=''/>\r\n                    <input\r\n                        type='search'\r\n                        placeholder='Поиск автора по имени'\r\n                    />\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport PersonData from '../data/data';\r\n\r\nimport PersonDetail from './PersonDetail';\r\nimport SearchBar from './SearchBar';\r\nimport '../App.css';\r\n\r\nclass PersonList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            list: PersonData,\r\n            currentPage: 1,\r\n            listPerPage: 10\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({\r\n            currentPage: Number(event.target.id)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.log(PersonData);\r\n\r\n        //Sort from large to small (both by pageviews and by name):\r\n        (function sorting() {\r\n            for (let i=0;\r\n                 i < PersonData.sort(function(obj1, obj2){\r\n                     if (obj1.name > obj2.name) {\r\n                         return 1;\r\n                     }\r\n                     if (obj1.name < obj2.name) {\r\n                         return -1;\r\n                     };\r\n                 }).length;\r\n                 i++) {\r\n                // console.log(PersonData[i].name);\r\n            }\r\n\r\n            for (let i=0;\r\n                 i < PersonData.sort(function(obj1, obj2){\r\n                     return obj2.pageviews-obj1.pageviews;\r\n                 }).length;\r\n                 i++) {\r\n                // console.log(PersonData[i].pageviews);\r\n            }\r\n        }());\r\n\r\n        const { list, currentPage, listPerPage } = this.state;\r\n\r\n        // Logic for displaying current list\r\n        const indexOfLastTodo = currentPage * listPerPage; //10\r\n        const indexOfFirstTodo = indexOfLastTodo - listPerPage; //1\r\n        const currentList = list.slice(indexOfFirstTodo, indexOfLastTodo); //slice.(1,10)\r\n\r\n        const renderList = currentList.map((item, index) => {\r\n            return <PersonDetail person={item} key={`person-list-key ${index}`} />\r\n        });\r\n\r\n        // Logic for displaying page numbers\r\n        const pageNumbers = [];\r\n        for (let i = 1; i <= Math.ceil(list.length / listPerPage); i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n        // console.log(pageNumbers); //[1,2,3,4]\r\n\r\n        const renderPageNumbers = pageNumbers.map(number => {\r\n            return (\r\n                <li\r\n                    key={number}\r\n                    id={number}\r\n                    onClick={this.handleClick}\r\n                >\r\n                    {number}\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='mainContainer'>\r\n\r\n                    <div className='searchMain'>\r\n                        <SearchBar />\r\n                    </div>\r\n\r\n                    <div className='blockPerson'>\r\n                        <ol>\r\n                                {/*{PersonData.map((item, index) => {*/}\r\n                                    {/*return <PersonDetail person={item} key={`person-list-key ${index}`} />*/}\r\n                                {/*})}*/}\r\n                            {renderList}\r\n                        </ol>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div>\r\n                    <ul id=\"page-numbers\">\r\n                        {renderPageNumbers}\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonList;\r\n","import React, { Component } from 'react';\nimport PersonList from './components/PersonList';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PersonList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}