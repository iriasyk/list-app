{"version":3,"sources":["images/medals/1st.svg","serviceWorker.js","components/PersonDetail.js","components/SearchBar.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","PersonDetail","person","this","props","colorCircle","backgroundColor","Math","floor","random","toString","substr","react_default","a","createElement","className","style","name","count_pub","pageviews","Component","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","searchString","users","currentPage","listPerPage","handleChange","bind","assertThisInitialized","handleClick","setState","PersonData","refs","search","focus","value","event","Number","target","id","_this2","_users","trim","toLowerCase","length","filter","user","i","sort","obj1","obj2","_this$state","indexOfLastTodo","indexOfFirstTodo","renderList","slice","map","item","index","components_PersonDetail","pageNumbers","ceil","push","renderPageNumbers","number","key","onClick","type","src","ref","onChange","placeholder","start","ReactDOM","render","components_SearchBar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3eb28ec8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1st.86c17a70.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass PersonDetail extends Component {\n    render() {\n        const {person} = this.props;\n\n        function getRandomColor () {\n            let hex = Math.floor(Math.random() * 0xFFFFFF);\n            return \"#\" + (\"000000\" + hex.toString(16)).substr(-6);\n        }\n\n        let colorCircle = {\n            backgroundColor: getRandomColor()\n        };\n\n        return (\n            <li>\n                <div className='liWrapper'>\n                    <div className='leftInfo'>\n                        <div className='circle' style={colorCircle}>\n                            <span>{person.name[0]}</span>\n                        </div>\n\n                        <div>\n                            <h1>{person.name}</h1>\n                            <p className='propertyForP'>{person.count_pub} публ.</p>\n                        </div>\n                    </div>\n\n                    <div className='medal'></div>\n\n                    <span>{person.pageviews}</span>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default PersonDetail;","import React, { Component } from 'react';\n\nimport PersonData from '../data/data';\nimport PersonDetail from './PersonDetail';\nimport './css/App.css';\n\nimport FirstMedal from '../images/medals/1st.svg';\n\n\nclass SearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchString: \"\",\n            users: [],\n\n            currentPage: 1,\n            listPerPage: 10,\n        };\n        this.handleChange = this.handleChange.bind(this); //for search\n        this.handleClick = this.handleClick.bind(this); //for pagination\n    }\n\n    // ---Search start\n    componentDidMount() {\n        this.setState({\n            users: PersonData,\n        });\n        this.refs.search.focus();\n    }\n\n    handleChange() {\n        this.setState({\n            searchString: this.refs.search.value\n        });\n    }\n    // ---Search end\n\n    // ---pagination start\n    handleClick(event) {\n        this.setState({\n            currentPage: Number(event.target.id)\n        });\n    }\n    // ---pagination end\n\n    render() {\n        // ---Search start\n        let _users = this.state.users;\n        let search = this.state.searchString.trim().toLowerCase();\n\n        if (search.length > 0) {\n            _users = _users.filter(function(user) {\n                return user.name.toLowerCase().match(search);\n            });\n        }\n        // ---Search end\n\n        //Sort from large to small (both by pageviews and by name):\n        (function sorting() {\n            for (let i=0;\n                 i < PersonData.sort(function(obj1, obj2){\n                     if (obj1.name > obj2.name) {\n                         return 1;\n                     }\n                     if (obj1.name < obj2.name) {\n                         return -1;\n                     };\n                 }).length;\n                 i++) {\n                // console.log(PersonData[i].name);\n            }\n\n            for (let i=0;\n                 i < PersonData.sort(function(obj1, obj2){\n                     return obj2.pageviews-obj1.pageviews;\n                 }).length;\n                 i++) {\n                // console.log(PersonData[i].pageviews);\n            }\n        }());\n\n        // ---pagination start:\n        const { currentPage, listPerPage } = this.state;\n\n        // Logic for displaying current list\n        const indexOfLastTodo = currentPage * listPerPage; //10\n        const indexOfFirstTodo = indexOfLastTodo - listPerPage; //1\n        const currentList = _users.slice(indexOfFirstTodo, indexOfLastTodo); //slice.(1,10)\n\n        const renderList = currentList.map((item, index) => {\n            return <PersonDetail person={item}/>\n        });\n\n        // Logic for displaying page numbers\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(_users.length / listPerPage); i++) {\n            pageNumbers.push(i);\n        }\n        // console.log(pageNumbers); //[1,2,3,4]\n\n        const renderPageNumbers = pageNumbers.map(number => {\n            return (\n                <li\n                    key={number}\n                    id={number}\n                    onClick={this.handleClick}\n                >\n                    {number}\n                </li>\n            );\n        });\n        // ---pagination end;\n\n        return (\n            <div className='App'>\n                <div className='wrapper'>\n                    <div className='mainContainer'>\n\n                        <div className='searchMain'>\n                            <form>\n                                <input type='submit' src='../images/search.png' value=''/>\n                                <input\n                                    type=\"text\"\n                                    value={this.state.searchString}\n                                    ref=\"search\"\n                                    onChange={this.handleChange}\n                                    placeholder='Поиск автора по имени'\n                                />\n                            </form>\n                        </div>\n\n                        <div className='blockPerson'>\n                            <ol start={1+(currentPage-1)*listPerPage}>\n                                {renderList}\n                            </ol>\n                        </div>\n\n                    </div>\n\n\n                    <div className='pagination'>\n                        <ul id=\"page-numbers\">\n                            {renderPageNumbers}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SearchBar from \"./components/SearchBar\";\n\nReactDOM.render(<SearchBar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}